// <auto-generated />
using System;
using IgniteLifeApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IgniteLifeApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250731131352_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Server.Models.BookingRuleOpeningException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingRuleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingRuleId");

                    b.ToTable("BookingRuleOpeningExceptions");
                });

            modelBuilder.Entity("Server.Models.BookingRuleOpeningHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingRulesId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingRulesId");

                    b.HasIndex("DayOfWeek", "BookingRulesId")
                        .IsUnique();

                    b.ToTable("BookingRuleOpeningHours");
                });

            modelBuilder.Entity("Server.Models.BookingRules", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BufferBetweenBookingsMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxAdvanceBookingDays")
                        .HasColumnType("integer");

                    b.Property<int>("MinAdvanceBookingHours")
                        .HasColumnType("integer");

                    b.Property<int>("SlotDurationMinutes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsDefault")
                        .IsUnique()
                        .HasFilter("\"IsDefault\" = TRUE");

                    b.ToTable("BookingRules");
                });

            modelBuilder.Entity("Server.Models.BookingServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BookingServiceType");
                });

            modelBuilder.Entity("Server.Models.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("Server.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Server.Models.Booking", b =>
                {
                    b.HasOne("Server.Models.BookingServiceType", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Server.Models.UserProfile", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.BookingRuleOpeningException", b =>
                {
                    b.HasOne("Server.Models.BookingRules", null)
                        .WithMany("OpeningExceptions")
                        .HasForeignKey("BookingRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.BookingRuleOpeningHour", b =>
                {
                    b.HasOne("Server.Models.BookingRules", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("BookingRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.UserInfo", b =>
                {
                    b.HasOne("Server.Models.UserProfile", "UserProfile")
                        .WithOne("Info")
                        .HasForeignKey("Server.Models.UserInfo", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Server.Models.BookingRules", b =>
                {
                    b.Navigation("OpeningExceptions");

                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("Server.Models.UserProfile", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Info");
                });
#pragma warning restore 612, 618
        }
    }
}
