// <auto-generated />
using System;
using IgniteLifeApi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IgniteLifeApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250813122130_namechange")]
    partial class namechange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.BookingRuleBlockedPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingRulesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("EndDateTimeUtc")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("StartDateTimeUtc")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("BookingRulesId");

                    b.ToTable("booking_rule_blocked_periods", (string)null);
                });

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.BookingRuleOpeningHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingRulesId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("CloseTimeUtc")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly>("OpenTimeUtc")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingRulesId");

                    b.HasIndex("DayOfWeek", "BookingRulesId")
                        .IsUnique();

                    b.ToTable("booking_rule_opening_hours", (string)null);
                });

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.BookingRules", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BufferBetweenBookingsMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<int>("MaxAdvanceBookingDays")
                        .HasColumnType("integer");

                    b.Property<int>("MinAdvanceBookingHours")
                        .HasColumnType("integer");

                    b.Property<int>("SingletonKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("SlotDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("\"Id\" IS NOT NULL");

                    b.HasIndex("SingletonKey")
                        .IsUnique();

                    b.ToTable("booking_rules", (string)null);
                });

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean");

                    b.Property<string>("ReplacedByTokenHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAtUtc");

                    b.HasIndex("TokenHash")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.BookingRuleBlockedPeriod", b =>
                {
                    b.HasOne("IgniteLifeApi.Domain.Entities.BookingRules", "BookingRules")
                        .WithMany("BlockedPeriods")
                        .HasForeignKey("BookingRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingRules");
                });

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.BookingRuleOpeningHour", b =>
                {
                    b.HasOne("IgniteLifeApi.Domain.Entities.BookingRules", "BookingRules")
                        .WithMany("OpeningHours")
                        .HasForeignKey("BookingRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingRules");
                });

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("IgniteLifeApi.Domain.Entities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("IgniteLifeApi.Domain.Entities.BookingRules", b =>
                {
                    b.Navigation("BlockedPeriods");

                    b.Navigation("OpeningHours");
                });
#pragma warning restore 612, 618
        }
    }
}
